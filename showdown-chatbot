#!/bin/env node

/**
 * Showdown ChatBot runner
 * Showdown ChatBot is distributed under the terms of the MIT License
 * (https://github.com/AgustinSRG/Showdown-ChatBot/blob/master/LICENSE)
 *
 * Run this file in order to start Showdown ChatBot application
 * Command line arguments options:
 *  -p [port] to change the http port
 *  -b [address] to change the bind address
 *  -d [path] to change the data / configuration path
 *  -i [instance] to change the instance (overwrites -d)
 *  -sp [port] to change the https port
 *  -k [ssl-key] to set the ssl key file
 *  -c [ssl-cert] to set the ssl certificate file
 *  --static to set static mode
 */

'use strict';

const Util = require("util");
const Path = require("path");

const Package = require(Path.resolve(__dirname, 'package.json'));

console.log(Util.format('Showdown-ChatBot %s', Package.version));

require(Path.resolve(__dirname, 'src/dependencies.js'));

console.log('Initializing...');

/* Shell Options */

let shellOpts = Object.create(null);
for (let i = 0; i < process.argv.length; i++) {
	let tag = process.argv[i].trim();
	if (tag.charAt(0) === '-') {
		if (process.argv[i + 1]) {
			shellOpts[tag] = process.argv[i + 1];
		} else {
			shellOpts[tag] = true;
		}
	}
}

let env = Object.create(null);
for (let key in shellOpts) {
	switch (key) {
		case '-port':
		case '-p':
			if (shellOpts[key] !== true && !isNaN(parseInt(shellOpts[key]))) {
				env.port = parseInt(shellOpts[key]);
				console.log("Shell Options: PORT set to " + env.port);
			} else {
				console.log("Invalid PORT set. Usage: node showdown-chatbot [-p] [PORT]");
				process.exit(1);
			}
			break;
		case '-bindaddress':
		case '-b':
			if (shellOpts[key] !== true) {
				env.bindaddress = shellOpts[key].trim();
				console.log("Shell Options: BINADDRESS set to " + env.bindaddress);
			} else {
				console.log("Invalid BINADDRESS set. Usage: node showdown-chatbot [-b] [BINADDRESS]");
				process.exit(1);
			}
			break;
		case '-dir':
		case '-d':
			if (shellOpts[key] !== true) {
				env.dir = Path.resolve(__dirname, shellOpts[key]);
				console.log("Shell Options: DATA-DIRECTORY set to " + env.dir);
			} else {
				console.log("Invalid DATA-DIRECTORY set. Usage: node showdown-chatbot [-d] [DATA-DIRECTORY]");
				process.exit(1);
			}
			break;
		case '-instance':
		case '-i':
			if (shellOpts[key] !== true) {
				env.dir = Path.resolve(__dirname, "instances", shellOpts[key]);
				console.log("Shell Options: DATA-DIRECTORY set to " + env.dir);
			} else {
				console.log("Invalid INSTANCE set. Usage: node showdown-chatbot [-i] [INSTANCE]");
				process.exit(1);
			}
			break;
		case '-sslport':
		case '-sp':
			if (shellOpts[key] !== true && !isNaN(parseInt(shellOpts[key]))) {
				env.sslport = parseInt(shellOpts[key]);
				console.log("Shell Options: SSL PORT set to " + env.sslport);
			} else {
				console.log("Invalid PORT set. Usage: node showdown-chatbot [-sp] [PORT]");
				process.exit(1);
			}
			break;
		case '-key':
		case '-k':
			if (shellOpts[key] !== true) {
				env.sslkey = Path.resolve(__dirname, shellOpts[key]);
				console.log("Shell Options: SSL-KEY set to " + env.sslkey);
			} else {
				console.log("Invalid SSL-KEY set. Usage: node showdown-chatbot [-k] [SSL-KEY]");
				process.exit(1);
			}
			break;
		case '-cert':
		case '-c':
			if (shellOpts[key] !== true) {
				env.sslcert = Path.resolve(__dirname, shellOpts[key]);
				console.log("Shell Options: SSL-CERT set to " + env.sslcert);
			} else {
				console.log("Invalid SSL-CERT set. Usage: node showdown-chatbot [-c] [SSL-CERT]");
				process.exit(1);
			}
			break;
		case '--static':
			console.log("MODE: Static Mode");
			env.staticmode = true;
			break;
	}
}

env.package = Package;

try {
	env.config = require(Path.resolve(__dirname, 'config.js'));
	console.log("Loaded configuration");
} catch (err) {
	console.log("Using default configuration");
	env.config = require(Path.resolve(__dirname, 'config-example.js'));
}

/* Require Main File */

require(Path.resolve(__dirname, 'src/index.js')).setup(env);
